% Parameters
L = 1.0;          % Length of the domain
c = 1.0;          % Wave speed
Nx = 100;         % Number of spatial points
Nt = 500;         % Number of time steps
T = 5.0;          % Total simulation time

% Derived parameters
dx = L / Nx;      % Spatial step size
dt = T / Nt;      % Time step size
x = linspace(0, L, Nx+1);  % Spatial grid
t = linspace(0, T, Nt+1);  % Time grid

% CFL condition
CFL = c * dt / dx;
if CFL > 1
    error('CFL condition violated. Reduce dt or increase dx.');
end

% Initialize solutions
u = sin(pi * x / L);          % Initial displacement (at t=0)
u_prev = u;                   % Displacement at t-dt (same as initial displacement)
u_next = zeros(1, Nx+1);      % Placeholder for displacement at t+dt

% Analytical solution for comparison
u_analytical = @(x, t) sin(pi * x / L) .* cos(pi * c * t / L);

% Time-stepping loop
for n = 1:Nt
    % Update using the finite difference scheme
    for i = 2:Nx
        u_next(i) = 2 * (1 - CFL^2) * u(i) - u_prev(i) + CFL^2 * (u(i+1) + u(i-1));
    end
    
    % Boundary conditions (Dirichlet: u = 0 at boundaries)
    u_next(1) = 0;
    u_next(Nx+1) = 0;
    
    % Update time levels
    u_prev = u;
    u = u_next;
    
    % Plot numerical and analytical solutions every 20 steps
    if mod(n, 20) == 0
        plot(x, u, 'b', 'LineWidth', 1.5); hold on;
        plot(x, u_analytical(x, t(n+1)), 'r--', 'LineWidth', 1.5);
        legend('Numerical', 'Analytical');
        title(['Time: ', num2str(t(n+1))]);
        xlabel('x');
        ylabel('u(x, t)');
        grid on;
        pause(0.01);
        hold off;
    end
end

% Plot the final state
figure;
plot(x, u, 'b', 'LineWidth', 1.5); hold on;
plot(x, u_analytical(x, T), 'r--', 'LineWidth', 1.5);
legend('Numerical', 'Analytical');
title(['Final State at Time: ', num2str(T)]);
xlabel('x');
ylabel('u(x, T)');
grid on;
hold off;

% MATLAB code to solve a challenging wave equation problem with spatially varying wave speed, damping, and external forcing

% Domain Parameters
Lx = 10; % Length of the domain in x-direction
T_total = 5; % Total simulation time
Nx = 500; % Number of spatial points (increased for better resolution)
Nt = 5000; % Number of time steps (increased for finer temporal resolution)

% Discretization
Delta_x = Lx / (Nx - 1);
Delta_t = T_total / Nt;

% Stability Condition (CFL)
c_max = 2; % Maximum wave speed, adjust based on c(x)
gamma = 0.1; % Damping coefficient
if Delta_t > Delta_x / (c_max * sqrt(2))
    error('CFL condition not met. Reduce Delta_t or increase Delta_x.');
end

% Spatial Grid
x = linspace(0, Lx, Nx);

% Time Grid
t = linspace(0, T_total, Nt);

% Define c(x)
c = 1 + 0.5 * x; % Wave speed increases linearly with x

% Define S(x, t)
S = @(x, t) exp(-((x - Lx/2).^2) / 0.5^2) .* sin(pi * t / T_total); 
% Gaussian pulse in space, sinusoidal in time

% Initialize displacement matrices
u_prev = zeros(Nx, 1); % Displacement at time n-1
u_current = zeros(Nx, 1); % Displacement at time n
u_next = zeros(Nx, 1); % Displacement at time n+1

% Initial Displacement: Gaussian Pulse
sigma = 0.5;
u_current = exp(-((x - Lx/2).^2) / (2 * sigma^2));

% Initial Velocity: Zero (u_prev = u_current)
u_prev = u_current;

% Precompute coefficients
c_squared = c.^2;
gamma_dt = gamma * Delta_t;

for n = 1:Nt-1
    % Update interior points
    for i = 2:Nx-1
        u_next(i) = (2 * u_current(i) - u_prev(i) + ...
                    (c_squared(i) * Delta_t^2 / Delta_x^2) * ...
                    (u_current(i+1) - 2 * u_current(i) + u_current(i-1)) + ...
                    Delta_t^2 * S(x(i), t(n))) / (1 + gamma_dt);
    end
    
    % Apply Boundary Conditions (Fixed boundaries: u=0)
    u_next(1) = 0;
    u_next(Nx) = 0;
    
    % Update for next time step
    u_prev = u_current;
    u_current = u_next;
    
    % Optional: Visualization at specific time steps
    if mod(n, 50) == 0
        plot(x, u_current, 'b', 'LineWidth', 1.5);
        xlabel('x', 'FontSize', 12);
        ylabel('u(x, t)', 'FontSize', 12);
        title(['Displacement at time t = ', num2str(t(n))], 'FontSize', 14);
        grid on;
        drawnow;
    end
end

% Plot Final Displacement
figure;
plot(x, u_current, 'r', 'LineWidth', 2);
xlabel('x', 'FontSize', 12);
ylabel('u(x, T)', 'FontSize', 12);
title('Final Displacement at t = T', 'FontSize', 14);
grid on;

